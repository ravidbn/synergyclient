name: Build Android APK

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Clean previous builds
      run: |
        rm -rf .buildozer
        rm -rf .gitmodules
        rm -rf bin
    
    - name: Install Java versions
      run: |
        sudo apt-get update
        sudo apt-get install -y openjdk-8-jdk openjdk-17-jdk
    
    - name: Enable 32-bit architecture and install system dependencies
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install -y git zip unzip python3-pip autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev cmake libffi-dev libssl-dev
        sudo apt-get install -y automake m4 gettext build-essential
        
        # Install 32-bit libraries (optional for modern builds)
        sudo apt-get install -y libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1 libbz2-1.0:i386 || echo "32-bit packages optional"
        
        # Fallback for libtinfo5 in Ubuntu 22.04+
        sudo apt-get install -y libtinfo5 || sudo apt-get install -y libtinfo6
        
    - name: Set up Android SDK with Java 17
      env:
        JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
      run: |
        # Download and setup Android SDK
        mkdir -p $HOME/android-sdk
        cd $HOME/android-sdk
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mkdir -p cmdline-tools/latest
        mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
        
        export ANDROID_HOME=$HOME/android-sdk
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
        
        # Download platform-tools and build-tools
        yes | sdkmanager --licenses || true
        sdkmanager "platform-tools" "build-tools;34.0.0" "platforms;android-34"
        
    - name: Create Android SDK licenses
      run: |
        export ANDROID_HOME=$HOME/android-sdk
        mkdir -p $ANDROID_HOME/licenses
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > $ANDROID_HOME/licenses/android-sdk-license
        echo "84831b9409646a918e30573bab4c9c91346d8abd" > $ANDROID_HOME/licenses/android-sdk-preview-license
        echo "d975f751698a77b662f1254ddbeed3901e976f5a" > $ANDROID_HOME/licenses/intel-android-extra-license
        
    - name: Install buildozer with Java 8
      env:
        JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython==0.29.33
        pip install -r requirements.txt
        
    - name: Initialize buildozer
      env:
        JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
        ANDROID_HOME: /home/runner/android-sdk
        ANDROID_SDK_ROOT: /home/runner/android-sdk
      run: |
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
        buildozer android clean || true
        
    - name: Build APK
      env:
        JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
        ANDROID_HOME: /home/runner/android-sdk
        ANDROID_SDK_ROOT: /home/runner/android-sdk
      run: |
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
        buildozer android debug --verbose
        
    - name: Upload APK
      uses: actions/upload-artifact@v3
      with:
        name: synergy-client-apk
        path: bin/*.apk
      if: always()
        
    - name: Upload build logs
      uses: actions/upload-artifact@v3
      with:
        name: build-logs
        path: .buildozer/
      if: failure()
